# This docker compose setup configures:
# - the Unleash server instance + the necessary backing Postgres database
# - the Unleash proxy
#
# To learn more about all the parts of Unleash, visit
# https://docs.getunleash.io
#
# NOTE: please do not use this configuration for production setups.
# Unleash does not take responsibility for any data leaks or other
# problems that may arise as a result.
#
# This is intended to be used for demo, development, and learning
# purposes only.

version: "3.9"
services:
  # The Unleash server contains the Unleash configuration and
  # communicates with server-side SDKs and the Unleash Proxy
  db:
    ports:
      - "5432:5432"
    image: postgres:15
    environment:
      # create a database called `db`
      POSTGRES_DB: "db"
      POSTGRES_PASSWORD: "unleash"
      # trust incoming connections blindly (DON'T DO THIS IN PRODUCTION!)
      POSTGRES_HOST_AUTH_METHOD: "trust"
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "--username=postgres",
          "--host=127.0.0.1",
          "--port=5432",
        ]
      interval: 2s
      timeout: 1m
      retries: 5
      start_period: 10s
  node1:
    image: prom/node-exporter
    ports:
      - "9100:9100"
    depends_on:
      db:
        condition: service_healthy
  prom:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/prometheus/prometheus.yml
    command: "--web.enable-remote-write-receiver"
    depends_on:
      db:
        condition: service_healthy
    # healthcheck:
    #   test: ["CMD", "curl", "localhost:9090"]
    #   interval: 1s
    #   timeout: 1m
    #   retries: 5
    #   start_period: 15s
  web:
    image: crunchydata/postgresql-prometheus-adapter:latest
    build:
      context: .
    ports:
      - "9201:9201"
    environment:
      DATABASE_URL: "postgres://postgres:unleash@db:5432/db"
      web_listen_address: ":9201"
      web_telemetry_path: "/metrics"
      log_level: info
      log_format: json
      pg_partition: "hourly"
      pg_commit_secs: 15
      pg_commit_rows: 20000
      pg_threads: 1
      parser_threads: 5
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9201/write"]
      interval: 1s
      timeout: 1m
      retries: 5
      start_period: 15s
